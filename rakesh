
<tbody>
    <tr><th align="left" colspan="2">Admin Functions:</th></tr>
</tbody>

<table width="100%" align="left" border="0">
    <c:if test="${showLegalHoldFunctions == 'false'}">
        <!-- Access Group LOB Dropdown -->
        <td width="20%" align="left">
            <label for="auSelectId">
                <c:out value="Access Group LOB" escapeXml="false"/>
                <a href="javascript: void(0);" onclick="showTooltip2(event, 'accessGrouplobId', '6274', 'R', 25, 25, true)" title="Click here for more information">
                    <img src="<%=toolTipImg%>" width="16" height="16" alt="Click here for more information" class="requiredfield"/>
                </a>
            </label>
        </td>
        <td align="left" id="auTRId">
            <!-- Dropdown for Access Group LOB Field -->
            <form:select class="formInput" path="barCustomerView.accessGrouplobSelect" name="barCustomerView.accessGrouplobSelect" id="auSelectId" size="1" tabindex="0" onchange="onchangeAccessGroupLob(this)">
                <form:option value="-1">&nbsp;</form:option>
                <!-- Loop to dynamically generate Access Group LOB options -->
                <c:forEach items="${bqrCalculatorWizardForm.bqrCustomerView.accessGrouplobs}" var="accessGrouplobVal">
                    <form:option value="${accessGrouplobVal.adLobId}">
                        ${encodeForHTML(accessGrouplobVal.adGrpArtLobName)}
                    </form:option>
                </c:forEach>
            </form:select>
            <input type="button" name="btnChangeAU" value="Submit" onclick="javascript: submitAUChange()"/>
        </td>
    </c:if>

    <c:if test="${showLegalHoldFunctions == 'true'}">
        <!-- Other fields for Legal Hold -->
        <tr>
            <td width="20%" align="left">
                <input type="radio" id="addLH" name="addLH" value="Y" onclick="javascript: disableRemLHRB()" />&nbsp; Add Legal Hold
            </td>
            <td align="left" id="addLHTRId">
                <input type="button" name="btnChangeLH" value="Submit" onclick="javascript: submitLegalHold()" />
            </td>
        </tr>
        <tr>
            <td width="20%" align="left">
                <input type="radio" id="remLH" name="remLH" value="N" onclick="javascript: disableAddlLHRB()" />&nbsp; Remove Legal Hold
            </td>
        </tr>
    </c:if>
</table>





<td width="20%" align="left">
    <label for="auSelectId">Access Group LOB</label>
</td>
<td align="left" id="auTRId">
    <!-- Dropdown for Access Group LOB Field -->
    <form:select class="formInput" path="barCustomerView.auSelect" name="barCustomerView.auSelect" id="auSelectId" onchange="onchangeAU(this)">
        <form:option value="-1">Select Access Group LOB</form:option>
        <!-- Loop to dynamically generate Access Group LOB options -->
        <c:forEach items="${bqrCalculatorWizardForm.bqrCustomerView.accessGrouplobs}" var="accessGrouplobVal">
            <form:option value="${accessGrouplobVal.adLobId}">
                ${encodeForHTML(accessGrouplobVal.adGrpArtLobName)}
            </form:option>
        </c:forEach>
    </form:select>
    <input type="button" name="btnChangeAU" value="Submit" onclick="javascript: submitAUChange()" />
</td>



Here is the previous version of the document provided before the recent updates:

---

# **CBAC to AIMS Admin Functionality Enhancements**

### **1. Introduction**
The migration from CBAC to the AIMS system in Phase 1 successfully shifted the system to AIMS. Now, in Phase 2, the focus is on enhancing admin functionalities in the ART system to allow administrators to manage Authorization Groups (AGs) and Lines of Business (LoBs). Only administrators can perform the following operations:
- Move AG groups between LoBs.
- Create new AG LoBs.
- Remove existing AG LoBs through a soft-delete process.

---

### **2. Objectives**
- Streamline the management of AGs and LoBs by authorized administrators.
- Ensure smooth integration between AIMS and ART systems.
- Improve validation and security checks to maintain data integrity.

---

### **3. Functionalities**

#### **3.1 Move AG Groups Between LoBs**
**Objective**: Enable admins to move an AG group from one LoB to another.  
**Steps**:  
1. Select the AG group to be moved.  
2. Select the destination LoB.  
3. Submit the operation.  

**Validations**:
- Check if the AG group exists in ART.
- Validate that the selected LoB is valid and not duplicated.

---

#### **3.2 Add New AG LoB**
**Objective**: Allow admins to create a new AG LoB using data from AIMS, ensuring it does not already exist in ART.  

**Steps**:
1. Populate the dropdown with LoBs from AIMS that are not in ART.  
2. Select a LoB and provide a unique name.  
3. Submit the operation.

**Validations**:
- Ensure the new LoB does not exist in ART DB.
- Confirm that the name provided is unique.

---

#### **3.3 Remove AG LoB**
**Objective**: Enable admins to soft-delete AG LoBs, marking them inactive in ART.  

**Steps**:  
1. Select the AG LoB to be removed.  
2. Submit the operation.  

**Outcome**:
- The LoB is marked as `is_deleted = Y` in ART.
- The LoB no longer appears in active dropdowns or records.

**Validations**:
- Ensure there are no records tied to the LoB being removed.
- Prompt the admin to reassign associated records before removal.

---

### **4. Validation Logic**
- **Dropdown Population**:  
  - For adding a new LoB, populate the dropdown with AIMS data that is not already in ART.  
- **Soft Delete Logic**:  
  - Mark `is_deleted = Y` in the database without physically removing the record.  

---

### **5. Key Features**
- **Admin-Only Access**:  
  Only admins can perform the move, add, and remove operations.  

- **Rollback Mechanism**:  
  Ensure proper validation so errors can be addressed without irreversible changes.  

- **Dependency Management**:  
  Notify admins of unresolved dependencies before performing operations.  

---

### **6. Future Scope**
- Expand admin functionalities to support bulk operations.
- Enhance validation to provide more informative messages.
- Develop analytics tools for monitoring AG group and LoB changes.

---

This version provides a structured explanation of the functionalities and validations. Let me know if you'd like any specific updates or refinements!





Here is the complete documentation based on your notes and the additional enhancements for clarity and structure:

---

# **CBAC to AIMS Admin Functionality Enhancements**  

### **1. Introduction**  

The migration from the CBAC system to the AIMS system has been successfully completed in Phase 1. In Phase 2, we are focusing on enhancing admin functionalities within the ART system. These enhancements enable authorized administrators to manage Authorization Groups (AGs) and Lines of Business (LoBs) effectively, ensuring alignment with business processes and system integrity.

---

### **2. Objectives**  

- Provide admins the ability to **move** AG groups between LoBs.  
- Allow creation of **new AG LoBs** by pulling data from the AIMS system and validating it against the ART database.  
- Enable removal of AG LoBs through soft deletion, ensuring traceability and compliance.  
- Ensure all admin operations are logged for auditing and security purposes.

---

### **3. Functionalities**  

#### **3.1 Move AG Groups Between LoBs**  

Admins can move AG groups from one LoB to another within the ART system.  

**Steps**:  
1. Select the AG group to be moved from the dropdown populated with data from ART DB.  
2. Select the target LoB from the dropdown.  
3. Validate the action:  
   - Ensure the target LoB exists in ART DB.  
   - Check that there are no conflicts with dependencies.  
4. Submit the operation.  
5. System updates the database, logging the action for audit purposes.  

**Validations**:  
- Ensure the selected AG group exists in ART DB.  
- Prevent moving AG groups to non-existent or duplicate LoBs.  
- Prompt admin if dependencies are not resolved.

---

#### **3.2 Add New AG LoB**  

Admins can create new LoBs based on data from AIMS, provided the LoB does not already exist in ART.  

**Steps**:  
1. Select a new AG LoB from a dropdown populated with data from AIMS.  
   - Dropdown displays only LoBs that do not already exist in ART.  
2. Provide a unique name for the new LoB.  
3. Submit the operation.  
4. System checks ART DB to validate the input and ensures no duplicates.  
5. System updates ART DB and logs the action.  

**Validations**:  
- Ensure the new LoB does not already exist in ART DB.  
- Verify the input is unique and free from conflicts with existing records.  
- Reject the creation if dependencies are unresolved.

---

#### **3.3 Remove AG LoB**  

Admins can remove existing LoBs through a soft-delete operation, marking them as inactive in the ART database.  

**Steps**:  
1. Select the AG LoB to be removed from the dropdown populated with data from ART DB.  
2. Submit the operation.  
3. System marks the LoB as `is_deleted = Y` in ART DB.  
4. LoB no longer appears in ART's active records but remains traceable for audit.  

**Validations**:  
- Ensure no active records are assigned to the LoB before removal.  
- Notify the admin of unresolved dependencies, if any.  
- Provide a warning if removing the LoB might impact existing records.

---

### **4. Purpose and Benefits**  

**Purpose**:  
The admin functionality enhancements provide improved control over AG groups and LoBs, streamlining processes and ensuring data integrity.  

**Benefits**:  
- Improved flexibility in managing AG groups and LoBs.  
- Reduced risk of data duplication and errors.  
- Increased efficiency through automated validations.  
- Enhanced compliance with soft deletion and audit logging.

---

### **5. System Architecture**  

The enhancements involve seamless integration between AIMS, ART, and the admin console.  

**Data Flow**:  
1. AIMS â†’ ART: Data synchronization and validation for dropdowns.  
2. Admin Console â†’ ART: Admin actions (move, add, remove) update ART DB.  
3. ART â†’ Admin Console: Error messages and operation logs.  

---

### **6. Security and Access Control**  

**Role-Based Access Control (RBAC)**:  
- Only authorized admins can access and perform the move, add, and remove operations.  

**Security Features**:  
- Encrypted connections between the admin console and the ART database.  
- Audit logging for all admin actions.  
- Regular access reviews and updates to RBAC policies.

---

### **7. Audit Logging**  

Each admin action is logged for traceability, including:  
- Admin username.  
- Date and time of the operation.  
- Action performed and the impact (e.g., "Moved AG Group X from LoB A to LoB B").  

---

### **8. Error Handling and Notifications**  

**Error Handling**:  
- Display error messages for invalid inputs (e.g., "Selected AG LoB already exists in ART").  
- Prompt admin to resolve unresolved dependencies before proceeding.  

**Notifications**:  
- Success: "Operation completed successfully."  
- Failure: "Operation failed due to [reason]. Please correct and retry."  

---

### **9. Testing and Quality Assurance**  

**Testing Strategy**:  
- **Unit Testing**: Validate individual functionalities (move, add, remove).  
- **Integration Testing**: Test interactions between AIMS, ART, and the admin console.  
- **User Acceptance Testing (UAT)**: Allow admins to test the system in a controlled environment.  
- **Regression Testing**: Ensure existing ART functionalities remain unaffected.  

---

### **10. Future Enhancements**  

- **Bulk Operations**: Enable batch processing for moving, adding, or removing AG groups.  
- **Advanced Reporting**: Provide analytics on admin actions and data trends.  
- **Integration with Other Systems**: Expand functionality to support other systems beyond AIMS.  

---

### **11. Glossary of Terms**  

- **AG Group**: Authorization Group used for access control.  
- **LoB**: Line of Business, representing functional divisions.  
- **AIMS**: New system replacing CBAC for managing AG groups.  
- **ART**: Existing database system storing AG and LoB data.  

---

This complete document provides clarity, structure, and depth, addressing technical and business requirements while being easily understandable for stakeholders. Let me know if you need further modifications!
#!/bin/bash

# Check if SID is provided as an argument
if [ -z "$1" ]; then
    echo "Usage: $0 <SID>"
    exit 1
fi

# Variables
SID="$1"
HOSTNAME=$(hostname)                     # Dynamically retrieve the server hostname
TIMESTAMP=$(date "+%Y%m%d_%H%M%S")       # Current date and time
TAR_DIR="/sap_mig/$SID/$HOSTNAME"
LOG_FILE="$TAR_DIR/sap_mig_$SID/log_$TIMESTAMP.log"
ERROR_LOG="$TAR_DIR/sap_mig_$SID/error_log_$TIMESTAMP.log"
TAR_COUNT=0                              # Count of successful tar files created
COPY_COUNT=0                             # Count of successful files or directories copied
SUCCESS_COUNT=0                          # Total success count
FAILURE_COUNT=0                          # Total failure count

mkdir -p "$TAR_DIR"

# Function to log progress
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $1" | tee -a "$LOG_FILE"
}

# Function to log errors
log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S'): ERROR: $1" | tee -a "$LOG_FILE" "$ERROR_LOG"
}

# Function to execute a command and handle its success or failure
execute_with_log() {
    local description="$1"
    local command="$2"

    log_message "START: $description"
    eval "$command"
    if [ $? -eq 0 ]; then
        log_message "SUCCESS: $description"
        ((SUCCESS_COUNT++))
        # Increment counters based on the description
        if [[ "$description" == *"tarball"* ]]; then
            log_message "File created successfully: $description"
            ((TAR_COUNT++))
        elif [[ "$description" == *"Copying"* ]]; then
            log_message "File copied successfully: $description"
            ((COPY_COUNT++))
        fi
    else
        log_error "FAILURE: $description"
        ((FAILURE_COUNT++))
    fi
}

# Log start
log_message "Script started for SID: $SID."

# Create the folder structure
execute_with_log "Create TAR directory structure at $TAR_DIR/TAR" "mkdir -p $TAR_DIR/TAR"
execute_with_log "Create etc directory structure at $TAR_DIR/etc" "mkdir -p $TAR_DIR/etc"

# TAR commands
log_message "Starting tarball operations"
execute_with_log "Creating tarball for /usr/sap/SID" "nohup tar -czvf $TAR_DIR/TAR/usr_sap_SID.tar.gz /usr/sap/SID &>> $LOG_FILE &"
# Add other tar commands here as in your script

# Copy commands
execute_with_log "Copying /etc/group to $TAR_DIR/etc" "cp /etc/group $TAR_DIR/etc"
execute_with_log "Copying /etc/passwd to $TAR_DIR/etc" "cp /etc/passwd $TAR_DIR/etc"
# Add other copy commands here as in your script

# Log summary
log_message "TAR operations completed."
log_message "Summary:"
log_message "Total tar files created: $TAR_COUNT"
log_message "Total files or directories copied: $COPY_COUNT"
log_message "Total successful commands: $SUCCESS_COUNT"
log_message "Total failed commands: $FAILURE_COUNT"

# Print information about running jobs
log_message "The following jobs may still be running in the background. Please check manually:"
jobs -l | tee -a "$LOG_FILE"

# Final success or failure message
if [ $FAILURE_COUNT -eq 0 ]; then
    log_message "Script execution completed successfully. Job finished successfully."
else
    log_message "Script execution completed with errors. Job finished with issues. Check $ERROR_LOG for details."
fi







+=========

To modify your shell script for a successful execution and generate a summary of created and copied files, you can implement logging and summary generation at the end of the script. Here's a revised version of your script with the required changes:

```bash
#!/bin/bash

if [ -z "$1" ]; then
    echo "Usage: $0 <SID>"
    exit 1
fi

# Variables
SID=$1
HOSTNAME=$(hostname)
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
TAR_DIR="/sap_mig/$SID/$HOSTNAME"
LOG_FILE="$TAR_DIR/sap_mig_$SID/log_$HOSTNAME_$TIMESTAMP.log"
ERROR_LOG="$TAR_DIR/sap_mig_$SID/error_log_$HOSTNAME_$TIMESTAMP.log"
SUMMARY_FILE="$TAR_DIR/summary_$HOSTNAME_$TIMESTAMP.log"

mkdir -p "$TAR_DIR"

# Function to log progress
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') INFO: $1" | tee -a "$LOG_FILE"
}

# Function to log errors
log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') ERROR: $1" | tee -a "$LOG_FILE" "$ERROR_LOG"
}

# Function to execute a command and handle its success or failure
execute_with_log() {
    local description="$1"
    local command="$2"

    log_message "START: $description"
    eval "$command"
    if [ $? -eq 0 ]; then
        log_message "SUCCESS: $description" | tee -a "$SUMMARY_FILE"
    else
        log_error "FAILURE: $description"
    fi
}

log_message "Script started for SID: $SID."

# Create folder structures
execute_with_log "Create directory structure at $TAR_DIR" "mkdir -p $TAR_DIR/TAR $TAR_DIR/etc"

# TAR commands
log_message "Starting tarball operations."

execute_with_log "Creating tarball for /usr/sap/$SID" "nohup tar -czvf $TAR_DIR/TAR/$SID.tar.gz /usr/sap/$SID &>> $LOG_FILE"

# Copy files
execute_with_log "Copying /etc/group to $TAR_DIR/etc" "cp /etc/group $TAR_DIR/etc"
execute_with_log "Copying /etc/passwd to $TAR_DIR/etc" "cp /etc/passwd $TAR_DIR/etc"

log_message "TAR operations completed."

# Print information about jobs still running
log_message "The following jobs are still running in the background. Please check manually:"
jobs -l | tee -a "$LOG_FILE"

log_message "Script execution completed successfully. Errors, if any, are logged in $ERROR_LOG."
log_message "Summary of created and copied files is available in $SUMMARY_FILE."
```

### Key Changes
1. **Summary File**:
   - Added `SUMMARY_FILE` to log successful operations.
2. **Improved Logging**:
   - Progress and error messages include timestamps.
   - Successful commands log details in both the main log and the summary file.
3. **Background Job Monitoring**:
   - Added information about background jobs still running.
4. **Readability**:
   - Clear messages for script progress and completion.

### Steps to Use:
1. Save the modified script as `your_script_name.sh`.
2. Execute it with the required `SID` argument:  
   ```bash
   ./your_script_name.sh <SID>
   ```
3. Check:
   - **`log_<hostname>_<timestamp>.log`** for detailed logs.
   - **`error_log_<hostname>_<timestamp>.log`** for errors.
   - **`summary_<hostname>_<timestamp>.log`** for a concise summary of successful operations.

This will ensure you have a detailed view of the operations and a quick summary of the completed actions.