import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

class BarCalculatorWizardFormTest {

    @Mock
    private HttpSession session;

    @Mock
    private UserDto userDto;

    @Mock
    private ApplicationConstants applicationConstants;

    @InjectMocks
    private BarCalculatorWizardForm objWizForm;

    private BarRecordSearchForm barRecordSearchForm;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        barRecordSearchForm = new BarRecordSearchForm();
        objWizForm = new BarCalculatorWizardForm();
    }

    @Test
    void testAdminUserWithValidADGroups() {
        // Mocking session attributes
        when(session.getAttribute("UserDto")).thenReturn(userDto);
        when(userDto.getUserADGroups()).thenReturn(new ArrayList<>());
        when(userDto.getRole()).thenReturn("Admin");
        when(userDto.isSigFlag()).thenReturn(true);

        // Mocking ApplicationConstants
        Map<String, ADGroupDtls> mockAdGrpMap = Map.of(
                "group1", new ADGroupDtls("Group 1"),
                "group2", new ADGroupDtls("Group 2")
        );
        when(ApplicationConstants.getAdGrpMap()).thenReturn(mockAdGrpMap);

        // Executing the logic
        if (userDto != null && userDto.getUserADGroups() != null) {
            if ("Admin".equalsIgnoreCase(userDto.getRole()) && userDto.isSigFlag() && ApplicationConstants.getAdGrpMap() != null) {
                List<ADGroupDtls> allADGrpsList = new ArrayList<>(mockAdGrpMap.values());
                barRecordSearchForm.setAccessGrouplobs(allADGrpsList);
                objWizForm.getBarCustomerView().setAccessGrouplobs(allADGrpsList);

                // Assertions
                assertEquals(allADGrpsList, barRecordSearchForm.getAccessGrouplobs());
                assertEquals(allADGrpsList, objWizForm.getBarCustomerView().getAccessGrouplobs());
            }
        }
    }

    @Test
    void testNonAdminUserWithADGroups() {
        // Mocking session attributes
        when(session.getAttribute("UserDto")).thenReturn(userDto);
        List<ADGroupDtls> userAdGroups = List.of(new ADGroupDtls("Group A"), new ADGroupDtls("Group B"));
        when(userDto.getUserADGroups()).thenReturn(userAdGroups);
        when(userDto.getRole()).thenReturn("User");
        when(userDto.isSigFlag()).thenReturn(false);

        // Executing the logic
        if (userDto != null && userDto.getUserADGroups() != null) {
            List<ADGroupDtls> adGroups = userDto.getUserADGroups();
            barRecordSearchForm.setAccessGrouplobs(adGroups);
            objWizForm.getBarCustomerView().setAccessGrouplobs(adGroups);

            // Assertions
            assertEquals(adGroups, barRecordSearchForm.getAccessGrouplobs());
            assertEquals(adGroups, objWizForm.getBarCustomerView().getAccessGrouplobs());
        }
    }
}
import pandas as pd
import os

# Path to the Parquet file
parquet_file_path = "path_to_your_parquet_file.parquet"

# Read the Parquet file
df = pd.read_parquet(parquet_file_path)

# Get the user's desktop path
desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")

# Save as a TXT file
txt_file_path = os.path.join(desktop_path, "output.txt")
df.to_csv(txt_file_path, index=False, sep="\t")  # Tab-separated for readability
print(f"File saved as TXT at: {txt_file_path}")

# Save as a JSON file
json_file_path = os.path.join(desktop_path, "output.json")
df.to_json(json_file_path, orient="records", lines=True)  # JSON lines format
print(f"File saved as JSON at: {json_file_path}")



here


<table width="100%" align="left" border="1">
  <tbody>
    <!-- BRT-749 -->
    <tr>
      <td width="20%" align="left">
        <label for="auId">Select Access Group LOB:</label>
      </td>
      <td align="left" id="auTRId">
        <select id="auId" name="auId" onchange="javascript: showHideAUSection()">
          <option value="Access group LOB">Access Group LOB (Move TO)</option>
          <!-- You can add more options here if needed -->
        </select>
      </td>
    </tr>
    <tr>
      <td align="left">
        <label for="newAuselectId">Target AU:</label>
      </td>
      <td align="left">
        <input type="text" class="formInput" id="newAuselectId" name="targetAu" maxlength="25">
      </td>
    </tr>
    <tr>
      <td colspan="2" align="left">
        <input type="button" name="btnChangeAU" value="Submit" onclick="javascript: submitaUChange()">
      </td>
    </tr>
  </tbody>
</table>


upto here
<table width="100%" align="left" border="0">
    <c:if test="${showLegalHoldFunctions == 'false'}">
        <tbody>
            <tr>
                <td width="20%" align="left">
                    <label for="auld">Access Group LOB: </label>
                </td>
                <td align="left" id="accessGrouplobTrId">
                    <!-- Corrected form:select -->
                    <form:select cssClass="formInput" path="bqrCustomerView.accessGrouplobSelect" name="bqrCustomerView.accessGrouplobSelect">
                        <form:option value="-1">&nbsp;</form:option>
                        
                        <!-- Corrected JSTL forEach loop -->
                        <c:forEach items="${bqrCustomerView.accessGrouplobs}" var="accessGrouplobsVal">
                            <form:option itemValue="${accessGrouplobsVal.adLobId}" value="${accessGrouplobsVal.adLobId}">
                                ${accessGrouplobsVal.adGrpArtLobName}
                            </form:option>
                        </c:forEach>
                    </form:select>
                </td>
            </tr>
            <tr>
                <td colspan="2" align="left">
                    <input type="button" name="btnChangeAU" value="Submit" onclick="javascript:submitaUChange()">
                </td>
            </tr>
        </tbody>
    </c:if>
</table>





<table width="100%" align="left" border="1">
  <tbody>
    <!-- BRT-749 -->
    <tr>
      <td width="20%" align="left">
        <label for="auId">Select Access Group LOB:</label>
      </td>
      <td align="left" id="auTRId">
        <select id="auId" name="auId" onchange="javascript: showHideAUSection()">
          <option value="Access group LOB">Access Group LOB (Move TO)</option>
          <!-- You can add more options here if needed -->
        </select>
      </td>
    </tr>
    <tr>
      <td align="left">
        <label for="newAuselectId">Target AU:</label>
      </td>
      <td align="left">
        <input type="text" class="formInput" id="newAuselectId" name="targetAu" maxlength="25">
      </td>
    </tr>
    <tr>
      <td colspan="2" align="left">
        <input type="button" name="btnChangeAU" value="Submit" onclick="javascript: submitaUChange()">
      </td>
    </tr>
  </tbody>
</table>




### **Complete Plan for Parent RC and Sub RC Implementation**

---

### **Phase 1: Requirement Analysis**
1. **Understand the Requirements:**
   - Add a **Sub Reason Code (Sub RC)** dropdown dependent on the selected **Parent RC**.
   - **If no Sub RCs** exist for a Parent RC:
     - Hide the Sub RC dropdown.
     - Display a message: *"No Sub Reason Codes available for the selected Parent Reason Code."*
   - **If Sub RCs exist** and the Sub RC dropdown is enabled:
     - Ensure the user selects a value or show a warning message: *"Please select a Sub Reason Code for the selected Parent Reason Code."*
   - Ensure backward compatibility with old records.
   - Soft-delete behavior for existing records in `T_BQR_Customer_Calc`.

2. **Identify Key Components:**
   - **Database:** New table for Sub RCs and column addition to existing tables.
   - **Backend Services:** APIs to fetch Parent RCs and corresponding Sub RCs.
   - **Frontend (UI):** Dropdowns for Parent RC and Sub RC with dependent behavior.
   - **Validation Rules:** Ensure valid combinations of Parent RC and Sub RC during data save.
   - **Triggers and Procedures:** For validation and soft-delete implementation.

---

### **Phase 2: Design**

#### **1. Database Design**
- **New Table: `T_BQR_Sub_Reason_Code_Def`**
  - Stores the mapping between Parent RCs and Sub RCs.
  - Includes soft-delete (`Is_Deleted`) functionality.

- **Modify Table: `T_BQR_Customer_Calc`**
  - Add a column: `Sub_RC`.

- **Relationships:**
  - Parent RC and Sub RC will be validated using `T_BQR_Sub_Reason_Code_Def`.

#### **2. UI/UX Design**
- **Parent RC Dropdown:**
  - Load all available Parent RCs.
- **Sub RC Dropdown:**
  - Dynamically populate based on the selected Parent RC.
  - Hidden if no Sub RCs are available for the selected Parent RC.
- **Messages:**
  - *"No Sub Reason Codes available for the selected Parent Reason Code."*
  - *"Please select a Sub Reason Code for the selected Parent Reason Code."*

#### **3. Backend Service Design**
- API for fetching:
  - **Parent RCs.**
  - **Sub RCs** for a given Parent RC.
- Validation rules:
  - Ensure valid Parent RC and Sub RC combinations during save.
  - Allow saving with `Sub_RC = NULL` if no Sub RCs exist for the selected Parent RC.

---

### **Phase 3: Development**

#### **1. Database Changes**
1. **Create `T_BQR_Sub_Reason_Code_Def` Table:**
   ```sql
   CREATE TABLE T_BQR_Sub_Reason_Code_Def (
       Calc_Code INT PRIMARY KEY AUTO_INCREMENT,
       Parent_RC INT NOT NULL,
       Sub_RC INT NOT NULL,
       Sub_RC_Desc VARCHAR(255),
       Display_Order INT,
       Parent_Lookup_Code VARCHAR(50),
       Sub_Lookup_Code VARCHAR(50),
       Created_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
       Created_By VARCHAR(50),
       Updated_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
       Updated_By VARCHAR(50),
       Is_Deleted BOOLEAN DEFAULT FALSE,
       UNIQUE (Parent_RC, Sub_RC)
   );
   ```

2. **Modify `T_BQR_Customer_Calc` Table:**
   ```sql
   ALTER TABLE T_BQR_Customer_Calc
   ADD COLUMN Sub_RC INT DEFAULT NULL;
   ```

3. **Soft Delete Implementation:**
   - **Trigger for Soft Delete on `T_BQR_Sub_Reason_Code_Def`:**
     ```sql
     CREATE TRIGGER trg_soft_delete_sub_rc
     BEFORE DELETE ON T_BQR_Sub_Reason_Code_Def
     FOR EACH ROW
     BEGIN
         SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Soft delete is enforced. Use Is_Deleted flag instead.';
     END;
     ```

#### **2. Backend Development**
1. **API for Parent RC:**
   - Fetch all Parent RCs.
2. **API for Sub RCs:**
   - Fetch Sub RCs for the selected Parent RC.
   - Include an indicator if no Sub RCs exist.
   - Example response:
     ```json
     {
         "parentRC": 946,
         "subRCs": [],
         "message": "No Sub Reason Codes available for the selected Parent Reason Code."
     }
     ```
3. **Validation Logic:**
   - Ensure the selected Parent RC and Sub RC are valid combinations.
   - Allow saving with `Sub_RC = NULL` if no Sub RCs exist.

#### **3. Frontend Development**
1. **Parent RC Dropdown:**
   - Populate using API.
2. **Sub RC Dropdown:**
   - Dynamically populate based on selected Parent RC.
   - Hide dropdown if no Sub RCs exist.
   - Show the message: *"No Sub Reason Codes available for the selected Parent Reason Code."*
3. **Form Validation:**
   - If the Sub RC dropdown is enabled but no value is selected:
     - Show the message: *"Please select a Sub Reason Code for the selected Parent Reason Code."*
     - Prevent form submission.

---

### **Phase 4: Testing**

#### **1. Unit Tests**
- Validate correct fetching of Parent RCs and Sub RCs.
- Test save functionality with and without Sub RC.

#### **2. Integration Tests**
- Test the dependent dropdown behavior.
- Validate backend responses and error handling.

#### **3. Regression Tests**
- Ensure old records are not impacted.
- Verify soft-deleted Sub RCs do not appear in the dropdown.

---

### **Phase 5: Deployment**

#### **1. Deployment Steps**
- Deploy database changes.
- Deploy backend services.
- Update the frontend.

#### **2. Rollback Plan**
- Revert database schema changes if issues arise.
- Ensure backup of existing data.

---

### **Phase 6: Maintenance and Support**
- Monitor API and database performance.
- Regularly clean up soft-deleted records if needed.

Let me know if you need additional details or examples!



Here’s how to implement the functionality to hide the **Sub RC** dropdown when no Sub RC is available and show a warning message when required:

---

### **Application Updates for Dropdown Behavior**

#### **1. Frontend Logic for Sub RC Dropdown**
- **Dropdown Visibility:**
  - **Default State:** The **Sub RC** dropdown is hidden.
  - **When Parent RC is Selected:**
    - Fetch **Sub RCs** for the selected **Parent RC** via an API or lookup call.
    - If no **Sub RCs** exist:
      - Hide the **Sub RC** dropdown.
      - Show a message: *"No Sub Reason Codes available for the selected Parent Reason Code."*
    - If **Sub RCs** exist:
      - Display the **Sub RC** dropdown.
      - Populate it with the corresponding Sub RC values.

#### **2. Warning Message on Empty Selection**
- **When Sub RC is Required but Not Selected:**
  - Add a validation check when submitting the form:
    - If the **Sub RC** dropdown is enabled but no value is selected, show a warning message:  
      *"Please select a Sub Reason Code for the selected Parent Reason Code."*
    - Prevent the form from being submitted until a valid **Sub RC** is selected.

#### **3. Example Workflow**
1. User selects a **Parent RC**:
   - Fetch the list of corresponding **Sub RCs**.
   - If no **Sub RCs** exist:
     - Hide the **Sub RC** dropdown.
     - Show the message: *"No Sub Reason Codes available for the selected Parent Reason Code."*
   - If **Sub RCs** exist:
     - Display the **Sub RC** dropdown with available values.
     - Allow the user to select a value.

2. User submits the form:
   - If the **Sub RC** dropdown is visible but no value is selected:
     - Show a validation error: *"Please select a Sub Reason Code."*
   - Proceed with saving the data only if both **Parent RC** and (if applicable) **Sub RC** are valid.

---

### **Backend Logic Updates**

#### **1. Sub RC API Enhancement**
- Modify the API fetching **Sub RCs** for a given **Parent RC**:
  - If no records are found in `T_BQR_Sub_Reason_Code_Def` for the given **Parent RC**:
    - Return a response with an empty list.
    - Include a flag or message indicating that no **Sub RCs** are available.
  - Example Response:
    ```json
    {
      "parentRC": 946,
      "subRCs": [],
      "message": "No Sub Reason Codes available for the selected Parent Reason Code."
    }
    ```

#### **2. Validation at Save**
- Ensure the backend validates the **Sub RC** as follows:
  - If **Parent RC** has corresponding **Sub RCs** in the database:
    - Require a valid **Sub RC** to be selected.
  - If no **Sub RCs** exist for the **Parent RC**, allow saving with `Sub_RC = NULL`.

---

### **UI Implementation Example**

#### **HTML & JavaScript**
```html
<form id="reasonCodeForm">
  <!-- Parent RC Dropdown -->
  <label for="parentRC">Parent Reason Code:</label>
  <select id="parentRC" onchange="loadSubRCs()">
    <!-- Options dynamically populated -->
  </select>

  <!-- Sub RC Dropdown -->
  <div id="sub
### Application Changes for Parent RC and Sub RC

---

#### **1. User Interface (UI) Updates**
- **Parent RC Dropdown:**
  - Load the existing list of **Parent RCs** from the database.
  - The dropdown should be searchable for ease of use, especially if the list is long.

- **Sub RC Dropdown:**
  - Dynamically populate based on the **Parent RC** selection.
  - Ensure the dropdown is disabled until a **Parent RC** is selected.
  - Fetch data from the **Sub RC Lookup Table** (`T_BQR_Sub_Reason_Code_Def`) using the selected **Parent RC**.
  - Display the **Sub_RC_Desc** for user clarity.

- **Error Handling:**
  - If no **Sub RC** exists for a selected **Parent RC**, show a message like "No Sub Reason Codes available for this selection."
  - Add client-side and server-side validation to ensure **Sub RC** is mandatory if required for the selected **Parent RC**.

---

#### **2. Business Logic Changes**
- **Load Lookups:**
  - Fetch both **Parent RCs** and their corresponding **Sub RCs** from the database.
  - Cache these lookups in memory to optimize performance.

- **Validation Rules:**
  - Ensure the selected **Parent RC** and **Sub RC** are valid combinations.
  - Prevent saving invalid or non-existent combinations into the database.

- **Backward Compatibility:**
  - For existing records without a **Sub RC**, leave the **Sub RC** dropdown empty or show "Not Applicable."

---

#### **3. Backend Service Updates**
- **APIs for Fetching Data:**
  - Create or update APIs to return:
    - All **Parent RCs**.
    - **Sub RCs** filtered by the selected **Parent RC**.

- **Save/Update Logic:**
  - Update backend logic to handle the new **Sub RC** field.
  - Validate and save both **Parent RC** and **Sub RC** into the `T_BQR_Customer_Calc` table.

- **Soft Delete Handling:**
  - Filter out **Sub RCs** where `Is_Deleted = TRUE` in API responses.
  - Ensure previously soft-deleted **Sub RCs** are not selectable in the dropdown.

---

#### **4. Trigger and Procedure Updates**
- **Trigger for `T_BQR_Customer_Calc`:**
  - Automatically validate and populate the **Sub RC** field during insert or update.
  - Raise errors if invalid combinations of **Parent RC** and **Sub RC** are encountered.

- **Procedure for Lookups:**
  - Create a procedure to fetch active (non-deleted) **Parent RCs** and **Sub RCs**.

---

#### **5. Testing**
- **Unit Tests:**
  - Verify that valid **Parent RC** and **Sub RC** combinations are saved correctly.
  - Ensure invalid combinations are rejected.

- **UI Tests:**
  - Test dropdown behavior for both **Parent RC** and **Sub RC**.
  - Validate dependent dropdown logic (enabling/disabling).

- **Regression Tests:**
  - Test old records to ensure they are unaffected.
  - Verify soft-deleted **Sub RCs** do not appear in dropdowns.

---

### Database Changes

---

#### **1. Create Table: `T_BQR_Sub_Reason_Code_Def`**
```sql
CREATE TABLE T_BQR_Sub_Reason_Code_Def (
    Calc_Code INT PRIMARY KEY AUTO_INCREMENT,
    Parent_RC INT NOT NULL,
    Sub_RC INT NOT NULL,
    Sub_RC_Desc VARCHAR(255),
    Display_Order INT,
    Parent_Lookup_Code VARCHAR(50),
    Sub_Lookup_Code VARCHAR(50),
    Created_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Created_By VARCHAR(50),
    Updated_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    Updated_By VARCHAR(50),
    Is_Deleted BOOLEAN DEFAULT FALSE,
    UNIQUE (Parent_RC, Sub_RC)
);
```

#### **2. Modify Table: `T_BQR_Customer_Calc`**
```sql
ALTER TABLE T_BQR_Customer_Calc
ADD COLUMN Sub_RC INT DEFAULT NULL;
```

#### **3. Triggers**
- **Trigger for `T_BQR_Customer_Calc`:**
  ```sql
  CREATE TRIGGER trg_validate_sub_rc
  BEFORE INSERT OR UPDATE ON T_BQR_Customer_Calc
  FOR EACH ROW
  BEGIN
    IF (NEW.Sub_RC IS NOT NULL) THEN
      DECLARE valid_count INT;
      SELECT COUNT(*) INTO valid_count
      FROM T_BQR_Sub_Reason_Code_Def
      WHERE Parent_RC = NEW.Parent_RC
        AND Sub_RC = NEW.Sub_RC
        AND Is_Deleted = FALSE;

      IF valid_count = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid Sub Reason Code for the selected Parent Reason Code';
      END IF;
    END IF;
  END;
  ```

- **Trigger for `T_BQR_Sub_Reason_Code_Def` (Soft Delete):**
  ```sql
  CREATE TRIGGER trg_soft_delete_sub_rc
  BEFORE DELETE ON T_BQR_Sub_Reason_Code_Def
  FOR EACH ROW
  BEGIN
    SET OLD.Is_Deleted = TRUE;
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Soft delete is enforced. Use Is_Deleted flag instead.';
  END;
  ```

#### **4. Views**
Update any views fetching data from `T_BQR_Customer_Calc` to include the new `Sub_RC` column.

---

Let me know if you need any additional details or SQL examples!





#####

Here’s a streamlined plan to implement the proposed solution for integrating a **Sub-Reason Code (SubRC)** feature in your application:

---

### **Step 1: Database Schema Updates**
1. **Create a New Table: `T_BQR_Sub_Reason_Code_Def`**
   - This table will store the mapping between **Parent RCs** and **Sub RCs**.
   - Columns:
     - `Calc_Code` (Primary Key, if applicable)
     - `Parent_RC`
     - `Display_Order`
     - `Sub_RC`
     - `Created_Date`
     - `Parent_Lookup_Code`
     - `Created_By`
     - `Sub_Lookup_Code`
     - `Updated_Date`
     - `Sub_RC_Desc`
     - `Updated_By`
     - `Is_Deleted` (Boolean flag for soft delete)
   - Constraints: Ensure unique combinations of `Parent_RC` and `Sub_RC`.

2. **Add Column in Existing Table: `T_BQR_Customer_Calc`**
   - Add a new column: `Sub_RC`.
   - Update necessary triggers to populate this column based on user input.

3. **Modify Views**
   - Update existing views to include the new `Sub_RC` data.
   - Ensure backward compatibility to prevent disruption to old records.

---

### **Step 2: Application Changes**
1. **Segregate Drop-Down Data**
   - **Parent RC Dropdown**:
     - Load from the existing Parent RC database.
   - **Sub RC Dropdown**:
     - Dynamically load based on the selected **Parent RC**.
     - Data fetched from the new `T_BQR_Sub_Reason_Code_Def` table.
     - Show only `Is_Deleted = FALSE` records.

2. **User Interface Enhancements**
   - Add a new dependent drop-down for **Sub RC**.
   - Enable **Sub RC** dropdown only when a valid **Parent RC** is selected.

3. **Validation and Save Logic**
   - Ensure both **Parent RC** and **Sub RC** values are saved to `T_BQR_Customer_Calc` table.

4. **Soft Delete Implementation**
   - Mark existing entries in the **reason code list** as `Is_Deleted = TRUE`.
   - Ensure the application handles these records seamlessly (e.g., filtering out deleted entries in queries).

---

### **Step 3: Data Handling**
1. **Data Loading for Lookups**
   - Load lookup values (`Parent RC`, `Sub RC`, `Sub RC Desc`) into appropriate caching layers for performance.

2. **Backward Compatibility**
   - Existing records in `T_BQR_Customer_Calc` should remain intact.
   - If no **Sub RC** exists for an old record, set `Sub_RC = NULL`.

---

### **Step 4: Triggers and Procedures**
1. **Trigger for `T_BQR_Customer_Calc`**
   - On insert/update, validate and populate `Sub_RC` based on the selected `Parent_RC`.

2. **Trigger for `T_BQR_Sub_Reason_Code_Def`**
   - Ensure changes in this table reflect in lookup caches or dropdowns.

3. **Stored Procedures**
   - Add procedures for:
     - Fetching **Parent RC** and corresponding **Sub RC**.
     - Performing soft delete on **Sub RCs**.

---

### **Step 5: Testing and Deployment**
1. **Testing**
   - Validate end-to-end functionality, including the new dropdown.
   - Test with old records to ensure no regressions.
   - Test soft delete behavior.

2. **Deployment**
   - Deploy schema changes, triggers, views, and application updates together to avoid data inconsistencies.

---

Let me know if you need further details on implementation or SQL examples!


### **Complete Plan for Parent RC and Sub RC Implementation**

---

### **Phase 1: Requirement Analysis**
1. **Understand the Requirements:**
   - Add a **Sub Reason Code (Sub RC)** dropdown dependent on the selected **Parent RC**.
   - **If no Sub RCs** exist for a Parent RC:
     - Hide the Sub RC dropdown.
     - Display a message: *"No Sub Reason Codes available for the selected Parent Reason Code."*
   - **If Sub RCs exist** and the Sub RC dropdown is enabled:
     - Ensure the user selects a value or show a warning message: *"Please select a Sub Reason Code for the selected Parent Reason Code."*
   - Ensure backward compatibility with old records.
   - Soft-delete behavior for existing records in `T_BQR_Customer_Calc`.

2. **Identify Key Components:**
   - **Database:** New table for Sub RCs and column addition to existing tables.
   - **Backend Services:** APIs to fetch Parent RCs and corresponding Sub RCs.
   - **Frontend (UI):** Dropdowns for Parent RC and Sub RC with dependent behavior.
   - **Validation Rules:** Ensure valid combinations of Parent RC and Sub RC during data save.
   - **Triggers and Procedures:** For validation and soft-delete implementation.

---

### **Phase 2: Design**

#### **1. Database Design**
- **New Table: `T_BQR_Sub_Reason_Code_Def`**
  - Stores the mapping between Parent RCs and Sub RCs.
  - Includes soft-delete (`Is_Deleted`) functionality.

- **Modify Table: `T_BQR_Customer_Calc`**
  - Add a column: `Sub_RC`.

- **Relationships:**
  - Parent RC and Sub RC will be validated using `T_BQR_Sub_Reason_Code_Def`.

#### **2. UI/UX Design**
- **Parent RC Dropdown:**
  - Load all available Parent RCs.
- **Sub RC Dropdown:**
  - Dynamically populate based on the selected Parent RC.
  - Hidden if no Sub RCs are available for the selected Parent RC.
- **Messages:**
  - *"No Sub Reason Codes available for the selected Parent Reason Code."*
  - *"Please select a Sub Reason Code for the selected Parent Reason Code."*

#### **3. Backend Service Design**
- API for fetching:
  - **Parent RCs.**
  - **Sub RCs** for a given Parent RC.
- Validation rules:
  - Ensure valid Parent RC and Sub RC combinations during save.
  - Allow saving with `Sub_RC = NULL` if no Sub RCs exist for the selected Parent RC.

---

### **Phase 3: Development**

#### **1. Database Changes**
1. **Create `T_BQR_Sub_Reason_Code_Def` Table:**
   ```sql
   CREATE TABLE T_BQR_Sub_Reason_Code_Def (
       Calc_Code INT PRIMARY KEY AUTO_INCREMENT,
       Parent_RC INT NOT NULL,
       Sub_RC INT NOT NULL,
       Sub_RC_Desc VARCHAR(255),
       Display_Order INT,
       Parent_Lookup_Code VARCHAR(50),
       Sub_Lookup_Code VARCHAR(50),
       Created_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
       Created_By VARCHAR(50),
       Updated_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
       Updated_By VARCHAR(50),
       Is_Deleted BOOLEAN DEFAULT FALSE,
       UNIQUE (Parent_RC, Sub_RC)
   );
   ```

2. **Modify `T_BQR_Customer_Calc` Table:**
   ```sql
   ALTER TABLE T_BQR_Customer_Calc
   ADD COLUMN Sub_RC INT DEFAULT NULL;
   ```

3. **Soft Delete Implementation:**
   - **Trigger for Soft Delete on `T_BQR_Sub_Reason_Code_Def`:**
     ```sql
     CREATE TRIGGER trg_soft_delete_sub_rc
     BEFORE DELETE ON T_BQR_Sub_Reason_Code_Def
     FOR EACH ROW
     BEGIN
         SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Soft delete is enforced. Use Is_Deleted flag instead.';
     END;
     ```

#### **2. Backend Development**
1. **API for Parent RC:**
   - Fetch all Parent RCs.
2. **API for Sub RCs:**
   - Fetch Sub RCs for the selected Parent RC.
   - Include an indicator if no Sub RCs exist.
   - Example response:
     ```json
     {
         "parentRC": 946,
         "subRCs": [],
         "message": "No Sub Reason Codes available for the selected Parent Reason Code."
     }
     ```
3. **Validation Logic:**
   - Ensure the selected Parent RC and Sub RC are valid combinations.
   - Allow saving with `Sub_RC = NULL` if no Sub RCs exist.

#### **3. Frontend Development**
1. **Parent RC Dropdown:**
   - Populate using API.
2. **Sub RC Dropdown:**
   - Dynamically populate based on selected Parent RC.
   - Hide dropdown if no Sub RCs exist.
   - Show the message: *"No Sub Reason Codes available for the selected Parent Reason Code."*
3. **Form Validation:**
   - If the Sub RC dropdown is enabled but no value is selected:
     - Show the message: *"Please select a Sub Reason Code for the selected Parent Reason Code."*
     - Prevent form submission.

---

### **Phase 4: Testing**

#### **1. Unit Tests**
- Validate correct fetching of Parent RCs and Sub RCs.
- Test save functionality with and without Sub RC.

#### **2. Integration Tests**
- Test the dependent dropdown behavior.
- Validate backend responses and error handling.

#### **3. Regression Tests**
- Ensure old records are not impacted.
- Verify soft-deleted Sub RCs do not appear in the dropdown.

---

### **Phase 5: Deployment**

#### **1. Deployment Steps**
- Deploy database changes.
- Deploy backend services.
- Update the frontend.

#### **2. Rollback Plan**
- Revert database schema changes if issues arise.
- Ensure backup of existing data.

---

### **Phase 6: Maintenance and Support**
- Monitor API and database performance.
- Regularly clean up soft-deleted records if needed.

Let me know if you need additional details or examples!